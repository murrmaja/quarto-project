[
  {
    "objectID": "boring.html",
    "href": "boring.html",
    "title": "Vorname Nachname",
    "section": "",
    "text": "BORING\nThis is a boring webpage!\nhttps://www.dropbox.com/s/zzggaive1lpr6ja/Syllabus%20Marketing%20Seminar%20WiSe%202022.pdf?dl=0\nhttps://github.com/dhguhl/mirscr\nhttps://bitbucket.org/dhguhl/workspace/snippets/6eMBry/accompanying-r-code-multinomial-logit"
  },
  {
    "objectID": "fun.html",
    "href": "fun.html",
    "title": "Vorname Nachname",
    "section": "",
    "text": "FUN\n\na <- 3\na^2\n\n[1] 9"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Vorname Nachname",
    "section": "",
    "text": "This is a Quarto website.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites."
  },
  {
    "objectID": "about.html#full-cv",
    "href": "about.html#full-cv",
    "title": "About me",
    "section": "Full CV",
    "text": "Full CV"
  },
  {
    "objectID": "Einführung.html",
    "href": "Einführung.html",
    "title": "MARKTFORSCHUNG UND MARKETINGENTSCHEIDUNGEN - SoSe 2023",
    "section": "",
    "text": "Hinweis zur Nutzung und Weitergabe  Die Datei wird Ihnen zur Nutzung im Rahmen dieser Veranstaltung bereitgestellt. Die Weitergabe der Datei an Dritte sowie deren Veröffentlichung, Vervielfältigung oder sonstige Verbreitung ist nicht gestattet."
  },
  {
    "objectID": "Einführung.html#einführung",
    "href": "Einführung.html#einführung",
    "title": "MARKTFORSCHUNG UND MARKETINGENTSCHEIDUNGEN - SoSe 2023",
    "section": "1 Einführung",
    "text": "1 Einführung\n\n1.1 Was ist R?\nWikipedia: “R ist eine freie Programmiersprache für statistisches Rechnen und statistische Grafiken. Sie wurde von Statistikern für Anwender mit statistischen Aufgaben entwickelt. […] R gilt zunehmend als die Standardsprache für statistische Problemstellungen sowohl in der Wirtschaft als auch in der Wissenschaft.”\n Was können Sie aus dieser Definition mitnehmen?  In R(Studio) befinden wir uns in einer Umgebung, in der statistische Datenverarbeitung durchgeführt werden kann. Das ist insofern relevant, als dass Ihnen heutzutage sowohl in der Wirtschaft als auch in vielen anderen Bereichen zunehmend große Datenmengen zur Verfügung stehen. Im Umgang mit diesen großen Datenmengen ist das Ziel oft, diese zu Nutzen zu machen, indem wir zum Beispiel diese Daten analysieren, auswerten oder visualisieren.  Ein sehr verbreitetes sogenanntes Statistikwerkzeug, das uns befähigt diese Analysen durchzuführen, ist R. R bietet Ihnen eine Vielzahl von Möglichkeiten, wie Sie Ihre Daten organisieren, transformieren, auswerten oder mit Hilfe von Grafiken anschaulich darstellen können.\nDas Ziel dieser Marketingveranstaltung ist es, Ihnen nahezubringen, wie man mit verschiedenen statistischen Verfahren auf konkrete Marktforschungsfragen antworten kann - Dabei soll R Ihnen als Werkzeug helfen, um statistische Analysen durchzuführen, Antworten zu finden und dementsprechend geeignete Marketingentscheidungen treffen zu können.\n\n\nWarum R?\n\nR ist frei zugänglich: Kostenlose Installation\nR ist Open Source\nAnwendung über den Rahmen dieses Kurses hinaus (z.B. Seminar- und Bachelorarbeiten)\nHohe Relevanz im akademischen und wirtschaftlichen (Arbeitsmarkt) Bereich\nR ist eine Cross-Plattform: Benutzung ist unabhängig vom Betriebssystem\n\nR kann von SPSS und SAS angesteuert werden\nR ist weltweit verbreitet und wird von vielen Menschen genutzt, die unabhängig voneinander an R arbeiten und versuchen, es kontinuierlich besser zu machen (durch z.B. die Entwicklung von sogenannten Zusatzfunktion oder packages: ca. 17.500)\nGroße Online-Community: Bietet Hilfe bei z.B. Fehlermeldungen, Coding-Problemen und allem, was sonst bei der Nutzung zu Schwierigkeiten führen kann…\n\nDas sind alles gute Gründe für die Nutzung von R. Allerdings gibt es sicherlich noch viele weitere Gründe, weshalb R relevant ist oder weshalb Sie sich mit R auseinandersetzen sollten.  Auf den ersten Eindruck mag der Umgang etwas schwierig, anspruchsvoll oder umständlich erscheinen; Sie werden aber schnell sehen, dass das gar nicht der Fall ist! Alle Codes, die wir hier im Rahmen der Übung durchgehen, werden Ihnen online zur Verfügung gestellt. Das heißt, Sie können anschließend zu Hause diese Codes durchgehen und in Ruhe nachvollziehen.\nDaher mein Tipp: Nutzen Sie die Chance, sich im Rahmen dieser Veranstaltung mit R auseinandersetzen zu können und zu erlernen. Wie bereits erwähnt, ist R ein sehr beliebtes Programm, welches Ihnen in Zukunft - sei es für Ihr Studium oder Ihre Karriere - bestimmt einen Mehrwert bieten kann."
  },
  {
    "objectID": "Einführung.html#erste-schritte",
    "href": "Einführung.html#erste-schritte",
    "title": "MARKTFORSCHUNG UND MARKETINGENTSCHEIDUNGEN - SoSe 2023",
    "section": "2 Erste Schritte",
    "text": "2 Erste Schritte\nIm Folgenden wird erklärt, wie Sie R sowie die dazugehörige IDE installieren können. Zusätzlich werden die wichtigsten ersten Schritte beim Arbeiten mit R beschrieben.\n\n2.1 R installieren\n\nGehen Sie zur Homepage: https://www.r-project.org\nWählen Sie CRAN auf der linken Seite oder download R\nWählen Sie einen CRAN Mirror aus (z.B. Germany: University of Münster, Germany)\nWählen Sie die Version aus, die zu Ihrem Betriebssystem passt (z.B. Windows, MacOs)\nKlicken Sie auf base\nWählen Sie download 4.2.0 (oder eine entsprechend neuere Version)\nKlicken Sie auf die heruntergeladene Datei (bspw. R-4.2.0-win.exe) und folgen Sie den Anweisungen (Ändern Sie Voreinstellungen nur dann, wenn Sie wissen, was Sie tun!)\nGlückwunsch, Sie haben R installiert!\n\n\n\n2.2 RStudio Desktop installieren\nIm nächsten Schritt sollen Sie die IDE RStudio herunterladen. IDE ist die Abkürzung für integrated development environment und erleichtert die Bedienung (input und output von Informationen). RStudio stellt Ihnen alles Nötige zum Programmieren mit R in einem übersichtlichen Bildschirm bereit, um das Programmieren einfacher zu gestalten.  Natürlich können Sie R auch unabhängig von RStudio verwenden. Das werden wir im Rahmen dieser Übung allerdings nicht machen.\nFangen Sie an mit: \n\nGehen Sie zur Downloadseite: https://www.rstudio.com/products/rstudio/download/#download\nWählen Sie die freie Version von RStudio Desktop\nWählen Sie unter “All Installers” die Version aus, die zu Ihrem Betriebssystem passt (z.B. RStudio 1.4.1106 für Windows 10/8/7, oder eine entsprechend neuere Version)\nKlicken Sie auf die heruntergeladene Datei (bspw. RStudio-1.4.1106.exe) und folgen Sie den Anweisungen (Ändern Sie die Voreinstellungen nur dann, wenn Sie wissen, was Sie tun!)\nGlückwunsch, Sie haben RStudio installiert!\n\n\n\n2.3 RStudio Oberfläche\nBeginnen wir nun mit der Nutzung von RStudio.  Wenn Sie RStudio durch einen “Doppelklick” öffnen, sehen Sie die Benutzeroberfläche. In diesem Fall ist diese in vier verschiedene Bereiche geteilt:\n\n\nOben links - Editor: Hier können Sie die Codes eingeben, bearbeiten, modifizieren, umstrukturieren und schlussendlich als Skript abspeichern.\nOben rechts - Konsole: In der Konsole müssen die Befehle am Ende eingegeben werden, damit sie auch von R gelesen werden können. Natürlich können die Codes mit einem einfachen Shortcut aus dem Editor in die Konsole überführt werden (Shortcut Mac: command-enter; Windows: control-enter).\nUnten rechts - Plots & Help: Im Plot-Tab werden Ihnen Grafiken angezeigt, die Sie im Skript oder in dr Konsole erstellt haben. Unter Help können bestimmte Befehle und Funktionen “nachgeschlagen” werden, um deren Funktionsweise, Argumente und Bedeutungen aufzufrischen bzw. zu verstehen.\nUnten links - Environment & History: Im Environment erhalten Sie einen Überblick über alle Ihre Objekte, die Sie abgespeichert haben. Unter History können Sie alle bisher in der Konsole ausgeführten Befehle nachlesen.\n\n\n\n2.4 Arbeitsverzeichnis\nAls nächstes wollen wir das Arbeitsverzeichnis setzen. Das Arbeitsverzeichnis ist der Ordner, in dem R ausgeführt wird. Das ist relevat, da R innerhalb eines “Projekts” stets auf das gesetzte Verzeichnis zu(rück)greift, wenn Sie z.B. Datensätze laden wollen.\nDabei steht WD für das Arbeitsverzeichnis (working directory). Im Arbeitsverzeichnis werden Ihre Dateien abgespeichert und (nur) von dort können Sie ihre Dateien in R laden.  Das WD müssen Sie selbst bestimmen bzw. “setzen”. Dies machen Sie mit dem Befehl setwd(). In diesen Befehl setzen Sie den Pfad des Ordners ein, indem Sie zukünfitg arbeiten möchten.\nWD setzen\n\nsetwd(\"/Users/MUSTERMANN/Desktop/R\")  # (Mac)\nsetwd(\"C:/Users/MUSTERMANN/Desktop/R\") # (Windows)\n\nWelches WD ist gerade gesetzt?  Um herauszufinden, in welchem working directory Sie sich aktuell befinden, führen Sie den Befehl wd() aus.\n\ngetwd()\n\n[1] \"/Users/majamurr/Desktop/KV_Hiwi/Quarto/quarto-project/websiteTest\"\n\n\n\n\n2.5 Pakete\nIm nächsten Schritt wollen wir uns angucken, wie man in R Pakete installiert. R bietet eine Reihe an Zusatzpaketen (~15.000), mit deren Hilfe Sie statistische Analysen besser durchführen können.\nUm zum Beispiel das Paket car zu installieren, müssen Sie zuerst den Befehl ìnstall.packages() eingeben (Pakete müssen nur einmal installiert werden).\n\ninstall.packages(\"car\")\n\nUm als nächstes Zugriff auf das zuvor installierte Paket zu haben, müssen Sie das Paket car für die Session laden. Pakete müssen für jede Session neu geladen werden. Dafür beutzen Sie den Befehl library().\n\nlibrary(car)\n\nLade nötiges Paket: carData\n\n\nNach dem Laden stehen alle Funktionen von car zur Verfügung."
  },
  {
    "objectID": "Einführung.html#erste-beispiele",
    "href": "Einführung.html#erste-beispiele",
    "title": "MARKTFORSCHUNG UND MARKETINGENTSCHEIDUNGEN - SoSe 2023",
    "section": "3 Erste Beispiele",
    "text": "3 Erste Beispiele\nKommen wir nun zu den ersten Beispielen in R.  In R ist es möglich - sowie mit einem ganz normal Taschenrechner auch - die grundlegenden arithmetischen Operatoren und Funktionen durchzuführen. Im Folgenden sehen Sie eine Übersicht von einigen dieser Operationen.\n\n\n\nOperatoren\nBeschreibung\n\n\n\n\n\\(+\\)\nAddition\n\n\n\\(-\\)\nSubtraktion\n\n\n\\(*\\)\nMultiplikation\n\n\n\\(/\\)\nDivison\n\n\n^ oder \\(**\\)\nExponentiation\n\n\n\n\n3.1 R als Taschenrechner (in der Konsole)\nDie Nutzung dieser Operatoren kann veranschaulicht werden, indem Sie folgende Aufgaben in die Konsole eingeben:\n\n(32 + 43) * 2\n(1.6 / (12 + 4.32)) * 99\n\nLogischerweise herrscht auch in R “Punkt vor Strich”, weshalb z.B. die Addition von 32 und 43 im ersten Beispiel durch Klammern deutlich gemacht werden muss. Allgemeiner: Die Reihenfolge von Berechnungen muss berücksichtigt und kenntlich gemacht werden.\nWeiterhin können Sie auch mit Dezimalzahlen arbeiten. Achten Sie darauf, dass Dezimalzahlen in R mit einem Punkt geschrieben werden (englische Schreibweise, z.B. 4.32).\nTo Do Nr. 1: Berechnen Sie die Differenz zwischen dem Jahr 2023 und dem Jahr, in dem Sie mit dem Studium angefangen haben. Dividieren Sie diesen Wert mit der Differenz zwischen dem Jahr 2023 und Ihrem Geburtsjahr. Multiplizieren Sie das Ergebnis mit 100. Was haben Sie berechnet?\nBeispiel:\n\n(2023 - 2018) / (2023 - 2000) * 100\n\n\n\n3.2 Workspace/Environment\nEine weitere sehr wichtige Funktion in R ist, dass Sie Zahlen/Variablen/Funktionen/… bestimmte Namen zuweisen können. Das heißt, Sie können Objekte benennen und mit diesen später weiterarbeiten. R merkt sich diese Objekte bzw. speichert diese im Environment ab (siehe 2.3 RStudio Oberfläche).\nDieses Zuweisen von Namen funktioniert mit dem Operator <-. Anstelle dieses Operators können Sie auch = verwenden. Beide Operatoren führen zum selben Ergebnis.  Die genaue Anwendung können Sie anhand des folgenden Beispiels nachvollziehen.\n\nBeispiele:\nErstellen wir eine Variable a mit dem Wert 4 und geben diese anschließend aus. Die definierte Variable a wird nun im Environment mit ihrem dazugehörigen Wert gespeichert.\n\na <- 4 \na \n\n[1] 4\n\n\nAchtung: R ist case sensitive. Das bedeutet, dass R zwischen Groß- und Kleinschreibung unterscheidet. Z.B. kennt R “A” nicht, wenn Sie bisher nur “a” definiert haben.\nAls nächstes können Sie die Variable nun nutzen, um Operationen durchzuführen. Das heißt, anstelle von 4 * 5 können Sie a * 5 in R berechnen. (Dabei wird das Produkt nicht in a gespeichert.)\n\na * 5   \n\n[1] 20\n\n\nUm die Variable a wieder aus dem Environment/Workspace zu entfernen, kann der Befehl rm() (Abkürzung für remove) benutzt werden.\n\nrm(a)\n\nNach dem Löschen “erkennt” R die Variable a nicht mehr.\nDas kann getestet werden durch ein erneutes Aufrufen von a.\n\na\n\nAls Output werden Sie hier eine Fehlermeldung erhalten (Error: object ‘a’ not found), da dieses Objekt sich nicht mehr im Environment befindet und daher nicht mehr verwendet werden kann.\n\n\n\n3.3 Skalare, Vektoren und Matrizen\nSie können allerdings nicht nur Zahlen einen Namem geben, sondern auch Vektoren und Matrizen. Beispiele könnten unter anderem sein:\n Diese Beispiele können Sie auch selber einmal ausprobieren:\nSkalar\n\na <- 3 \na\n\n[1] 3\n\n\nVektor  Einen Vektor definiert man mit der c()-Funktion. In diese Funktionen schreiben Sie die Zahlen, aus denen R einen Vektor bilden soll. In diesem Fall sind das die Zahlen 3 bis 6.\n\nb <- c(3, 4, 5, 6)\nb\n\n[1] 3 4 5 6\n\n\nUm die Zahlenfolge nicht jedes mal ausschreiben zu müssen, können Sie auch den Operator : benutzen. Der Doppelpunkt zwischen zwei Zahlen signalisiert, dass R alle ganzen Zahlen berücksichtigen soll, die zwischen 3 und 6 liegen (inklusive 3 & 6).\n\nb <- c(3:6)\nb\n\n[1] 3 4 5 6\n\n\nMatrix  Um eine Matrix zu definieren, verwenden Sie den Befehl matrix(). Die wichtigsten Argumente für diesen Befehl sind:\n\ndata = Daten/Elemente, die Matrix berücksichtigen soll\nnrow = Zeilenanzahl\nncol = Spaltenanzahl\nbyrow = TRUE bildet die Matrix von dem Vektor nach Zeilen FALSE ist vorgegeben: bildet die Matrix nach Spalten\n\nIn unserem Beispiel soll die Matrix c alle Elemente des Vektors b berücksichtigen. Weiterhin setzen wir die Zeilenanzahl nrow = 2. Um anstelle der Zeilenanzahl die Spaltenanzahl zu definieren, müssen Sie nur das Argument nrow mit ncol austauschen.\n\nc <- matrix(b, nrow = 2)\nc\n\n     [,1] [,2]\n[1,]    3    5\n[2,]    4    6\n\n\nEin weiteres Argument des Matrixbefehls ist byrow. Ist dieser Befehl auf TRUE gesetzt, bildet R die Matrix nach Zeilen, andernfalls nach Spalten. Die default-Einstellung ist byrow = FALSE. Das bedeutet, sollten Sie dieses Argument weglassen, wird Ihre Matrix nach Spalten gebildet. \nUm die Matrix nach Zeilen zu bilden, müssen Sie dieses aktiv im Befehl angeben.\n\nmatrix(b, nrow = 2, byrow = TRUE)\n\n     [,1] [,2]\n[1,]    3    4\n[2,]    5    6\n\n\n\n\n3.4 Funktionen\nWeiterhin können Sie in R auf Funktionen zurückgreifen, die Ihnen die Arbeit sehr erleichtern. Funktionen in R sind festgelegte Abläufe von Handlungen und besitzen Funktionsargumente in Klammern.\nZum Beispiel können wir uns überlegen, wie wir den Mittelwert von dem Vektor b ermitteln wollen.  Diesen können wir zum einen “per Hand” ausrechnen, indem wir alle Elemente addieren und anschließend durch die Anzahl der Einträge dividieren.\n\n(3 + 4 + 5 + 6) / 4\n\n[1] 4.5\n\n\nZum anderen können wir auch Funktionen anwenden, die uns einen Teil der Arbeit abnehmen und die Berechnung schneller machen.\nUm die Berechnungen im Zählers zu vereinfachen, können Sie die Funktion sum() benutzen. Diese summiert alle Zahlenelemente innerhalb eines Vektors auf.\nUm die Berechungen im Nenner zu vereinfachen, können Sie die Funktion length() benutzen. Diese gibt einem die Länge des Vektors aus, sprich die Anzahl der Einträge in einem Vektor.\n\nsum(b) / 4\n\n[1] 4.5\n\nsum(b) / length(b)\n\n[1] 4.5\n\n\nAllerdings geht es noch einfacher! In R gibt es die Funktion mean(), welche Ihnen direkt den Mittelwert eines Vektors ausgeben kann.\n\nmean(b)\n\n[1] 4.5\n\n\nSie können sehen, alle Versionen haben den gleichen Output.\nTo Do Nr. 2: Berechnen Sie die Summe und den Mittelwert der Zahlen 1 bis 10.\n\nd <- c(1:10)   # Vektor mit Zahlen 1 bis 10 definieren\n\n\nsum(d)         # die Summe berechnen\n\n[1] 55\n\nmean(d)\n\n[1] 5.5\n\n\n\n\nWeitere Funktionen\nNatürlich gibt es noch viele weitere Funktionen, die Sie z.T. im Laufe dieser Veranstaltung noch kennenlernen werden.  Eine davon ist die rnorm()-Funktion zur Erzeugung von normalverteilten Zufallszahlen (vorallem in der Markforschung sehr hilfreich!).\nSchauen wir uns ein Beispiel an.\n\nrnorm(5)  # erzeugt genau 5 Zufallszahlen aus der Standardnormalverteilung\n\n[1] 0.1627214 2.1405486 1.5808541 1.7009321 1.8269465\n\n\nSie können sehen, der Befehl führt dazu, dass genau fünf zufällige Zahlen aus der Standardnormalverteilung gezogen werden. Das heißt, solange Sie keine Parameter zur Ziehung der Zufallszahlen festlegen, ist die defaukt-Einstellung der Normalverteilung die Standardnormalverteilung. Diese hat einen Mittelwert = 0 und eine Standardabweichung = 1.\nNatürlich können Sie diese Parameter als Argumente in der Funktion anpassen. Dazu können Sie folgende Argumente beeinflussen:\n\nn = Anzahl der Zufallszahlen, die gezogen werden sollen\nmean = Mittelwert definieren\nsd = Standardabweichung definieren\n\nIn dem nachstehenden Beispiel sollen 5 Zufallszahlen gezogen werden, wobei die Verteilung aus der diese Zahlen gezogen werden einen Mittelwert von 2 und eine Standardabweichung von 3 haben soll.\n\nrnorm(n = 5, mean = 2, sd = 3)\n\n[1]  3.9006505 -0.7912027  3.8246120  2.6799113 -0.6478147\n\n\nAchtung: Jede Ziehung erzeugt ein neues Set von Zufallszahlen!\n\n\n3.5 Plots\nUm das Kapitel “Erste Beispiele” abzuschließen, schauen wir uns noch kurz Plots bzw. Grafiken an. Vertieft wird das Erstellen und die Nutzung von Plots in einer nachfolgenden Übung zum Thema “Deskriptive Datenanalyse”.\nAls Grundlage des heutigen Plots definieren Sie zunächst zwei Vektoren mit jeweils 100 Zufallszahlen aus der Standardnormalverteilung. Dafür sollen Sie wieder die Funktion rnorm() verwenden.\n\nx1 <- rnorm(100)\nx2 <- rnorm(100)\n\nDiese beiden Vektoren sollen nun in einem Streudiagramm dargestellt werden. Dafür kann die plot()-Funktion verwendet werden.\n\nplot(x1)     # Streudiagramm: Werte von x1 gegen Reihenfolge (Index)\n\n\n\n\nDabei können die Vektoren einzeln, aber auch zusammen bzw. “gegeneinander” geplottet werden.\n\nplot(x1, x2) # Streudiagramm: Werte von x1 gegen x2\n\n\n\n\nAußerdem können die Verteilungen der einzelnen Vektoren mit Hilfe eines Histograms dargestellt werden. Dafür verwenden Sie die Funktion hist().\n\nhist(x1)     # Histogramm: Verteilung von x1\n\n\n\n\nTo Do Nr. 3: Wiederholen Sie das Ganze mit 10000 Zufallszahlen.\n\nx1 <- rnorm(10000)\nx2 <- rnorm(10000)\n\nplot(x1)    \n\n\n\nplot(x1, x2)\n\n\n\nhist(x1)"
  },
  {
    "objectID": "Einführung.html#hilfe-und-dokumentation",
    "href": "Einführung.html#hilfe-und-dokumentation",
    "title": "MARKTFORSCHUNG UND MARKETINGENTSCHEIDUNGEN - SoSe 2023",
    "section": "4 Hilfe und Dokumentation",
    "text": "4 Hilfe und Dokumentation\nWie anfangs erwähnt, können Sie die help()-Funktion oder das help-Fenster benutzen, um sich Dokumentationen oder Beschreibungen für bestimmte Funktionen ausgeben zu lassen. Dieses Tool wollen wir uns nun genauer anschauen.\nMöglicherweise wollen Sie mehr über die mean()-Funktion von zuvor lernen. In diesem Fall können Sie folgenden Befehl eingeben:\n\nhelp(mean)     \n\nDaraufhin erscheint im help-Fenster die genaue Dokumentation. In dieser Dokumentation wird erklärt, was diese Funktion macht, welche Argumente sie besitzt, was diese Argumente bedeuten, wie sie anzuwenden sind sowie deren default-Einstellungen. Gegen Ende werden noch Beispiele gezeigt.\nEine Alternative zur help()-Funktion bietet das ?.\n\n?mean\n\nUm typische Anwendungsbeispiele von der mean()-Funktion zu sehen, können Sie folgenden Befehl benutzen:\n\nexample(mean)\n\n\nmean> x <- c(0:10, 50)\n\nmean> xm <- mean(x)\n\nmean> c(xm, mean(x, trim = 0.10))\n[1] 8.75 5.50\n\n\nGerade am Anfang kann es sehr hilfreich sein, sich einen generellen Überblick über R zu verschaffen. Dies können Sie machen, indem sie help.start() eingeben.\n\nhelp.start()\n\nstarte den http Server für die Hilfe fertig\n\n\nWenn der Browser '/usr/bin/open' bereits ausgeführt wird, wird er nicht\n    neu gestartet, sondern Sie müssen in sein Fenster wechseln\nAnsonsten: Geduld ...\n\n\nTo Do Nr. 4: Schauen Sie sich die Hilfe und Anwendungsbeispiele für andere Funtktionen an, z.B. sum().\n\nhelp(sum)\nexample(sum)\n\n\nsum> ## Pass a vector to sum, and it will add the elements together.\nsum> sum(1:5)\n[1] 15\n\nsum> ## Pass several numbers to sum, and it also adds the elements.\nsum> sum(1, 2, 3, 4, 5)\n[1] 15\n\nsum> ## In fact, you can pass vectors into several arguments, and everything gets added.\nsum> sum(1:2, 3:5)\n[1] 15\n\nsum> ## If there are missing values, the sum is unknown, i.e., also missing, ....\nsum> sum(1:5, NA)\n[1] NA\n\nsum> ## ... unless  we exclude missing values explicitly:\nsum> sum(1:5, NA, na.rm = TRUE)\n[1] 15"
  },
  {
    "objectID": "Einführung.html#r-skripte",
    "href": "Einführung.html#r-skripte",
    "title": "MARKTFORSCHUNG UND MARKETINGENTSCHEIDUNGEN - SoSe 2023",
    "section": "5 R-Skripte",
    "text": "5 R-Skripte\nR-Skripte sind Dokumente, die Sie im Editor erstellen, bearbeiten und verwenden können. Skripte ermöglichen es Ihnen, ihre Codes zu speichern, um zu einem späteren Zeitpunkt weiter daran arbeiten zu können.\nWeiterhin können Sie Kommentare in Ihr Skript mit einbauen. Dafür verwenden sie die #. Texte hinter Rauten werden auskommentiert.\nUm Befehle oder auch Gruppen von Befehlen ausführen zu lassen, markieren Sie die entsprechenden Zeilen im Skript und drücken Sie “command + enter” für Mac bzw. “control + enter” für Windows."
  },
  {
    "objectID": "Einführung.html#datenstrukturen",
    "href": "Einführung.html#datenstrukturen",
    "title": "MARKTFORSCHUNG UND MARKETINGENTSCHEIDUNGEN - SoSe 2023",
    "section": "6 Datenstrukturen",
    "text": "6 Datenstrukturen\nIm Folgenden wollen wir uns die grundlegenden Datenstrukturen in R anschauen. Dabei können wir u.a. vier Strukturen voneinander unterscheiden:\n\nVektoren: eindimensionale Datenstruktur, haben wir bereits kennengelernt\nMatrizen: zweidimensionale Datenstruktur\nData Frames: zweidimensionale Datenstruktur, die im Gegensatz zu Matrizen aber verschiedene Skalenniveaus beinhalten kann; Ideal für ganze Datensätze\nListen: dimensionslose Datenstruktur, die beliebige andere Strukturen beinhalten kann (eine Art Sammelbecken\n\nEine hilfreiche Funktion zum Herausfinden der jeweiligen Datenstruktur ist str() (Abkürzung für structure). Um zu verdeutlichen, was diese Funktion genau macht, schauen wir uns ein Beispiel an. Dafür definieren wir zuerst einen Vektor mit 100 standardnormalverteilten Zufallszahlen. Diesen setzen wir anschließend in die Funktion ein.\n\nx <- rnorm(100)\nstr(x)\n\n num [1:100] -1.1869 0.2425 -0.9495 1.6639 0.0934 ...\n\n\nIm Output können Sie sehen, dass dieser Vektor eine numerische Struktur hat (num für numeric). Das bedeutet, dass es in diesem Vektor ausschließlich Zahlenobjekte abgespeichert werden.\nIm weiteren Verlauf dieser Übung werden wir uns noch weitere Datenstrukturen anschauen.\nAchtung: Matrizen können nur numerische Strukur besitzen!\n\n6.1 Vektoren\nBeginnen wir mit den Vektoren.\nDefinieren Sie zunächst einen Vektor mit den fünf Zahlen: 1,4,6,8,10.\n\nvec1 <- c(1, 4, 6, 8, 10) \nvec1\n\n[1]  1  4  6  8 10\n\n\nUm ein bestimmtes Element des Vektors ausgeben zu lassen, müssen Sie die Position des Elements in eckigen Klammern angeben. In diesem Fall wollen wir uns das fünfte Element - Zahl = 10 - ausgeben lassen. Da wir wissen, dass die 10 an fünfter Position steht, können wir mit Hilfe der eckigen Klammern direkt auf dieses Element zugreifen.\n\nvec1[5] \n\n[1] 10\n\n\nWollen wir allerdings Elemente in einem Vektor nachträglich verändern, müssen zwei Schritte beachtet werden:\n\nSchritt: Welche Position soll nachträglich verändert werden?\nSchritt: Wie soll dieses Element verändert werden?\n\nUm ein Element mit einem neuen Wert zu überschreiben, müssen Sie zuerst die Position im Vektor mit eckigen Klammern spezifieren. Anschließend weisen wir diesem Element einen neuen Wert zu.  Hier soll das dritte Element (Zahl = 6) durch die Zahl 12 ersetzt werden.\n\nvec1[3] <- 12 \nvec1\n\n[1]  1  4 12  8 10\n\n\nEbenfalls ist es möglich, einen Vektor mit Hilfe der seq()-Funktion zu erstellen. Dabei wird eine Sequenz definiert, z.B. von 0 bis 1 in 0.25er Schritten:\n\nvec2 <- seq(from = 0, to = 1, by = 0.25) \nvec2 \n\n[1] 0.00 0.25 0.50 0.75 1.00\n\n\nAbschließend ist anzumerken, dass Vektoren auch elementweise addiert werden können:\n\nvec1 + vec2 \n\n[1]  1.00  4.25 12.50  8.75 11.00\n\n\n\n\n6.2 Matrizen\nKommen wir nun zu den Matrizen - den zweidimensionalen Datenstrukturen.\nSie wissen, dass eine Matrix mit Hilfe der matrix()-Funktion definiert werden kann. Dafür brauchen Sie einen Vektor als “data”-input. In diesem Fall ist das ein Vektor mit den sechs Zahlen: 9, 2, 3, 4, 5, 6. Weiterhin müssen Sie angeben, aus wie vielen Zeilen bzw. Spalten die Matrix bestehen soll.\n\nmat <- matrix(c(9, 2, 3, 4, 5, 6), ncol = 3, nrow = 2)\nmat  \n\n     [,1] [,2] [,3]\n[1,]    9    3    5\n[2,]    2    4    6\n\n\nUm uns die erste Zeile der Matrix ausgeben zu lassen, müssen wir die Position der ersten Zeile in eckigen Klammern hinter das Objekt schreiben.\nDa es sich bei einer Matrix um eine zweidimensionale Datenstruktur handelt, müssen wir klar definieren, welche Dimensionen ausgegeben werden sollen. Dies geschieht indem wir Kommas in den eckigen Klammern hinzufügen. Dabei steht die Zahl vor dem Komma für Zeilen und die Zahl nach dem Komma für Spalten. Sollen für eine Zeile alle Spalten angezeigt werden (oder vice versa), kann die entsprechende Stelle in den eckigen Klammern einfach frei gelassen werden.\n\nmat[1, ] # Erste Zeile\n\n[1] 9 3 5\n\n\n\nmat[, 2] # Zweite Spalte\n\n[1] 3 4\n\n\n\nmat[2, 3] # Element in Zeile 2 und Spalte 3 ausgeben\n\n[1] 6\n\n\n\nFunktionen & Matrizen\nViele Funktionen lassen sich (auch) direkt auf Matrizen anwenden. Zum Beispiel können die sum() und mean()-Funktionen direkt angewendet werden.\n\nsum(mat)\n\n[1] 29\n\n\nDabei bildet sum() die Summe aller Elemente in der Matrix während mean() den Mittelwert aller Einträge berechnet.\n\nmean(mat)\n\n[1] 4.833333\n\n\nTo Do Nr. 5: Erstellen Sie eine 3x3 Einheitsmatrix. \n\nmatrix(c(1, 0, 0,\n         0, 1, 0,\n         0, 0, 1), nrow = 3, ncol = 3)\n\n     [,1] [,2] [,3]\n[1,]    1    0    0\n[2,]    0    1    0\n[3,]    0    0    1\n\n# oder\ndiag(1, nrow = 3, ncol = 3)\n\n     [,1] [,2] [,3]\n[1,]    1    0    0\n[2,]    0    1    0\n[3,]    0    0    1\n\n\n\n\n\n6.3 Data frames\nDrei Spalten (id, x, y)\n\ndf <- data.frame(id = c(\"id1\", \"id2\"), x = c(11, 14), y = c(19, 21))\ndf \n\n   id  x  y\n1 id1 11 19\n2 id2 14 21\n\n\nNur die Spalte y ausgeben\n\ndf$y      # als Vektor\n\n[1] 19 21\n\ndf[, 3]   # als Vektor\n\n[1] 19 21\n\ndf[[\"y\"]] # als Vektor\n\n[1] 19 21\n\ndf[\"y\"]   # als Data frame\n\n   y\n1 19\n2 21\n\n\nZweite Zeile ausgeben\n\ndf[2, ]\n\n   id  x  y\n2 id2 14 21\n\n\nToDo: Versuchen Sie einen Data frame mit dem Inhalt der Tabelle aus der Uebungsfolie 26 zu bauen.\n\ndf2 <- data.frame(Konsument = c(1:5),\n                  Geschlecht = c(\"weiblich\", \"weiblich\", \"maennlich\",\n                                 \"weiblich\", \"maennlich\"),\n                  Alter = c(26, 34, 28, 35, 30))\ndf2\n\n  Konsument Geschlecht Alter\n1         1   weiblich    26\n2         2   weiblich    34\n3         3  maennlich    28\n4         4   weiblich    35\n5         5  maennlich    30\n\n\n\n\n6.4 Listen\n\n#Liste mit drei Eintraegen:\nli <- list(v1 = 1, \n           v2 = c(1, 2), \n           v3 = seq(0, 1, length = 5))\n\nli$v1      # nur 'v1' ausgeben (hier eine einzelne Zahl)\n\n[1] 1\n\nli[[\"v1\"]] # alternativ\n\n[1] 1\n\nli$v2      # nur 'v2' ausgeben (hier zwei Zahlen)\n\n[1] 1 2\n\nli[[\"v2\"]] \n\n[1] 1 2\n\nli$v3      # nur 'v3' ausgeben (hier fuenf Zahlen)\n\n[1] 0.00 0.25 0.50 0.75 1.00\n\nli[[\"v3\"]]\n\n[1] 0.00 0.25 0.50 0.75 1.00\n\n\n10 zu jedem Eintrag in ‘v3’ addieren\n\nli$v3 + 10\n\n[1] 10.00 10.25 10.50 10.75 11.00"
  },
  {
    "objectID": "Einführung.html#daten-laden-und-speichern",
    "href": "Einführung.html#daten-laden-und-speichern",
    "title": "MARKTFORSCHUNG UND MARKETINGENTSCHEIDUNGEN - SoSe 2023",
    "section": "7 Daten laden und speichern",
    "text": "7 Daten laden und speichern\nDaten zuerst laden (!) R Datenformat\n\nload(\"age1.Rdata\")\nage1\n\ncsv Datenformat\n\nage2 <- read.csv(\"age2.csv\")\nage2\n\nDaten speichern\n\nsave(age1, file = \"age1.Rdata\")    # in R Datenformat\n\nwrite.csv(age2, file = \"age2.csv\", # in csv Datenformat\n          row.names = FALSE)       # ohne Zeilennamen"
  },
  {
    "objectID": "Einführung.html#nas",
    "href": "Einführung.html#nas",
    "title": "MARKTFORSCHUNG UND MARKETINGENTSCHEIDUNGEN - SoSe 2023",
    "section": "8 NAs",
    "text": "8 NAs\n\nx <- c(1, 3, NA, 5)\n\nmean(x)\n\n[1] NA\n\n\nmean() funktioniert nicht, NA wird ausgegeben\num NA zu igorieren:\n\nmean(x, na.rm = TRUE)\n\n[1] 3"
  },
  {
    "objectID": "Einführung.html#klassen",
    "href": "Einführung.html#klassen",
    "title": "MARKTFORSCHUNG UND MARKETINGENTSCHEIDUNGEN - SoSe 2023",
    "section": "9 Klassen",
    "text": "9 Klassen\nnumeric (num)\n\nn <- c(1.3, 0.4, 0.0001)\nstr(n)\n\n num [1:3] 1.3 0.4 0.0001\n\n\ninteger (int)\n\ni <- c(3L, 1L, 4L)\nstr(i)\n\n int [1:3] 3 1 4\n\n\ncharacter (chr)\n\nch <- c(\"Hans\", \"Frank\", \"Julia\", \"Hans\")\nstr(ch)\n\n chr [1:4] \"Hans\" \"Frank\" \"Julia\" \"Hans\"\n\n\nfactor (Factor)\n\nf <- factor(ch)\nstr(f)\n\n Factor w/ 3 levels \"Frank\",\"Hans\",..: 2 1 3 2\n\n\nlogical (logi)\n\nlog <- ch == \"Frank\"\nlog\n\n[1] FALSE  TRUE FALSE FALSE"
  },
  {
    "objectID": "Einführung.html#r-programmierung",
    "href": "Einführung.html#r-programmierung",
    "title": "MARKTFORSCHUNG UND MARKETINGENTSCHEIDUNGEN - SoSe 2023",
    "section": "10 R-Programmierung",
    "text": "10 R-Programmierung\n\n10.1 if-Bedingung\nBei einer if-Bedingung werden bestimmte Befehle in Abhaengigkeit von dem Status einer wahr/falsch-Aussage ausgefuehrt\n\nw <- 3\nw\n\n[1] 3\n\n\n\nif(w < 5) {  # Bedingung pruefen: Wenn ...\n  d <- 2     # Dann ...\n} else {     \n  d <- 10    # Sonst ...\n}            # Ende\nd\n\n[1] 2\n\n\nVektrorisiert\n\nw <- c(3, 5, 8)\nd <- ifelse(w < 5, 2, 10)\nd\n\n[1]  2 10 10\n\n\nToDo: Erstellen Sie fuer den Data frame age2 eine neue nominale Variable “unter25”, welche zeigt ob der Konsument unter 25 Jahre alt ist oder nicht.\n\nage2$unter25 <- ifelse(age2$Alter < 25, \"Ja\", \"Nein\")\nage2\n\n\n\n10.2 for-Schleife\n\nx <- 1\nfor (i in 1:10) {\n  x <- x - i\n}\nx  \n\n[1] -54\n\n\n\n\n10.3 Eigene Funktionen\n\nmad <- function(x, y) { # 2 Argumente: x und y\n  mean(abs(x - y))      # abs und mean werden kombiniert \n  # abs() - berechnet den absoluten Wert\n}\n\nmad(x = c(1, 2, 3), y = c(7, 1, 4))\n\n[1] 2.666667"
  }
]